"use strict"
// Задача 1.
// Посмотрите, понятно ли вам, почему код ниже работает именно так?

var a = 1, b = 1, c, d;

c = ++a; alert(c); // 2
d = b++; alert(d); // 1
// для переменной с используется префиксная форма инкремента, поэтому значение увеличивается и присваивается переменной.
// для переменной b - постфиксная, поэтому значение увеличилось, но в выражени возвратило старое значение.

c = (2+ ++a); alert(c); // 5
d = (2+ b++); alert(d); // 4

alert(a); // 3
alert(b); // 3
// а было равно 2. Перфиксный инкремент увеличил на 1 и прибавили 2 = 5.
// b было равно 2. Постфиксный Инкремент увеличил на 1, но в выражении вернул старое значение 2. И 2 прибавили = 4.

// Задача 2.
// Чему будет равен x в примере ниже?

var a = 2;

var x = 1 + (a *= 2);
// икс равно 5. 
// выражение в скобках равно а = а * 2

// Задача 3.
// Расписать словами в JS комментарии как работает следующий код: 

var a = 2; 
var b = 4; 

var c = (b += 5) - a++ * b - 3 + (b -= 3 + 1 - --a);
alert(c);
// Переменной "а" присовено значение 2.
// Переменной "b" присовено значение 4. 
// Вначале вычисляется то, что в скобках
// затем инкремент/декремент 
// затем умножить/разделить
// плюс/минус 
// присваивание
// 1. Первые скобки, сначала сложение 4 + 5, затем присваивание результата 9 переменной "b".
// 2. Вторые скобки, сначала декремент для "а", операции сложения и вычитания слева-направо: 4 - 3 + 1 - 1 и затем результат 1 присваивается переменной "b"
// 3. Выполняется постпрефиксный инкремент a++
// 4. Выполняется умножение а * b   (2 * 1)
// 5. Выполняются оставшиеся операторы сложения и вычитания слева-направо: 9 - 2 - 3 + 1 = 5
// 6. Результат 5 присваивается переменной "с".
