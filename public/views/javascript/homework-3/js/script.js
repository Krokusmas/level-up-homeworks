'use strict';
// Unit link - https://learn.javascript.ru/ifelse

// Task 1
if ("0") {
  alert( 'Привет' );
} // Выведется ли alert? Да, т.к. непустая строка - это true


// Task 2
var officialNameJs = prompt('Каково «официальное» название JavaScript?', '');
if (officialNameJs === 'EcmaScript') {
  console.log('Верно!');
} else {
  console.log('Не знаете? «ECMAScript»!');
}

// Task 3
var temperature = prompt('Сколько градусов по Цельсию в твоём холодильнике?', '');
if (temperature > 0) {
  console.log(1);
} else if (temperature < 0) {
  console.log(-1);
} else {
  console.log(0); 
}

// Task 4
var userName = prompt('Кто пришёл?', '');
var password;
if (userName === 'Админ') {
  password = prompt('Пароль?', '');
  if (password === 'Черный Властелин') {
    console.log('Добро пожаловать!');
  } else if (password === null) {
    console.log('Вход отменен');
  } else {
    console.log('пароль неверен');
  }
} else if (userName === null) {
  console.log('Вход отменен');
} else { 
  console.log('Я вас не знаю');
}

// Task 5
result = (a + b < 4) ? 'Мало' : 'Много';

// Task 6
var message = (login === 'Вася') ? 'Привет' : (login === 'Директор') ? 'Здравствуйте' : (login === '') ? 'Нет логина' : '';

// Unit link https://learn.javascript.ru/logical-ops

// Task 1

// выведет 2, т.к. это число даёт значение true и является первым неложным значением слева направо.

// Task 2

//внутренний alert выведет 1, но т.к. вызов alert дает значение undefined, то оператор ИЛИ пойдет проверять следующее значение и остановится на 2, т.к. это значение true. Итого выведется 1 и затем 2.

// Task 3

// null т.к. это первое ложное значение.

// Task 4

// 1 т.к. alert вовзращает значение udefined на нем вычисление и закончится.

// Task 5

// выведет 3. У оператора И приоритет выше, поэтому он выдаст последнее значение true - это 3. Затем выполнится оператор ИЛИ null || 3 , где значение 3 - true и на нём останавливается вычисление.

// Task 6

if (age >= 14 && age <= 90);

// Task 7
if (!(age >= 14 && age <= 90));
if (age < 14 || age > 90);

// Task 8

// первое - верно, т.к. число -1 даст значение true.
// это if неверно т.к. ноль даст значение false.
// третье - верно, т.к. оператор И имеет приоритет и оба его операнда дают значение true. 
// Затем сравнивается null и 1, оператор ИЛИ выдаст значение 1, т.к. оно даёт true.

// Unit link https://learn.javascript.ru/types-conversion

// Task 1

"" + 1 + 0 // 10. Один из элементов строка, поэтому при сложении происходит конкатенация и операнды преобразуются в строку, и складываются в строку.
"" - 1 + 0 // -1. Происходит преобразование к числу, а пустая строка равна 0.
true + false // 1. Происходит преобразование к числу. 1 + 0 = 1.
6 / "3" // 2. Происходит преобразование к числу. 6/3 = 2.
"2" * "3" // 6. Происходит преобразование к числу.
4 + 5 + "px" // "9px". Арифметические операции выполняются слево направо. Сначала получается сумма чисел 9, затем происходит конкатенация.
"$" + 4 + 5 // "$45". Операции сложения идут слева направо. Числа поочереди преобразуются в строку и добавляются к первой строке.

"4" - 2 // 2. Это уже было. Преобразование к числу и операция вычитания. 4 - 2 = 2.

"4px" - 2 // NaN. Программа не может конвертировать в число строку с буквенными символами, поэтому выдается значение NaN и арифметическая операция не может быть произведена.

7 / 0 // Infinity. деление на 0 в JS даёт значение Infinity.

"  -9\n" + 5 // "-9\n5". Т.к. один из элемннтов строка при сложении происходит конкатенация.

"  -9\n" - 5 // -14. При преобразовании строки к числу обрезаются пробелы по бокам, а \n это перенос строки по-сути тот же пробел. -9 - 5 = -14.

5 && 2 // 2. Если оба операнда дают true, логический оператор "И"" возвращает значение последнего операнда.

2 && 5 // 5. То же самое.

5 || 0 // 5. Логический оператор "ИЛИ" возвращает первое значение true и прекращает проверку.

0 || 5 // 5. То же самое.

null + 1 // 1. null при преобразовании к числу даёт 0.
undefined + 1 // NaN. undefined при преобразовании к числу даёт NaN.
null == "\n0\n" // false. null, согласно спецификации равно undefined и само себе.
+null == +"\n0\n" // true. Оператор унарный плюс приводит тип операнда к числу. null = 0, а строка с нулём так же равна 0. Боковые пробелы в ней обрезаются.
